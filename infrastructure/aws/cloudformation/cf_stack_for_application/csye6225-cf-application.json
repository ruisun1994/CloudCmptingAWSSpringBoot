{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Sample CloudFormation Template for CSYE 6225 - Spring 2018",
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "32": "ami-6411e20d",
        "64": "ami-7a11e213"
      }
    }
  },
  "Conditions": {},
  "Parameters": {
    "lambdaarn": {
      "Type": "String"
    },
    "S3BucketName": {
      "Type": "String",
      "Default": "s3.csye6225-spring2018-sunrui.me",
      "AllowedValues": [
        "s3.csye6225-spring2018-sunrui.me",
        "s3.csye6225-spring2018-xueti.me",
        "s3.csye6225-spring2018-chaiyi.me"
      ]
    },
    "EC2ForWebKeyName": {
      "Description": "Name of an existing EC2 key pair for SSH access to the EC2 instance.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "csye6225"
    },
    "Subnet1": {
      "Type": "String"
    },
    "Subnet2": {
      "Type": "String"
    },
    "Subnet3": {
      "Type": "String"
    },
    "LoadBalancerPolicy": {
      "Type": "String"
    },
    "VpcId": {
      "Type": "String"
    },
    "ImageId": {
      "Type": "String"
    },
    "CoolDown": {
      "Type": "String"
    },
    "MinSize": {
      "Type": "String"
    },
    "MaxSize": {
      "Type": "String"
    },
    "DesiredCapacity": {
      "Type": "String"
    },
    "WebPolicy" : {
    "Type" : "String"
    },
    "InstanceType" : {
    "Type" : "String"
  },
  "DomainName" : {
  "Type" : "String"
  }
  },
  "Resources": {
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "IamInstanceProfile": "ec2profile",
        "ImageId": {
          "Ref": "ImageId"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": "csye6225",
        "SecurityGroups": [
          {
            "Ref": "WebPolicy"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash -xe ",
                "sudo apt-get update ",
                "sudo apt-get install openjdk-8-jdk -y",
                "sudo apt-get install ruby -y ",
                "sudo apt-get install wget -y ",
                "sudo apt-get install python -y ",
                "sudo apt-get update ",
                "sudo wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install ",
                "sudo chmod +x ./install ",
                "sudo ./install auto ",
                "sudo service codedeploy-agent start ",
                "sudo apt-get install tomcat8 -y ",
                "sudo mkdir /var/tempimage\n",
                "sudo chown -R tomcat8 /var/tempimage\n",
                "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -Dspring.datasource.username=csye6225master -Dspring.datasource.password=csye6225password  -Dspring.profiles.active=aws\\\"\" >> /etc/default/tomcat8 ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'JAVA_OPTS=\"${JAVA_OPTS} -Dspring.datasource.url=\\\"jdbc:mysql://",
                      {
                        "Fn::GetAtt": [
                          "myRDSInstance",
                          "Endpoint.Address"
                        ]
                      },
                      ":3306/csye6225\\\"\"' >> /etc/default/tomcat8"
                    ]
                  ]
                },
                "sudo service tomcat8 restart ",
                "sudo apt-get update",
                "sudo touch /tmp/awslogs.conf",
                "sudo echo '[general]' > /tmp/awslogs.conf",
                "sudo echo 'state_file= /var/awslogs/agent-state' >> /tmp/awslogs.conf",
                "sudo echo '[logstream1]' >> /tmp/awslogs.conf",
                "sudo echo 'file = /var/log/tomcat8/csye6225-aws.log' >> /tmp/awslogs.conf",
                "sudo echo 'log_group_name = csye6225-webapp' >> /tmp/awslogs.conf",
                "sudo echo 'log_stream_name = csye6225-webapp' >> /tmp/awslogs.conf",
                "sudo echo 'datetime_format = %d/%b/%Y:%H:%M:%S' >> /tmp/awslogs.conf",
                "curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O",
                {
                  "Fn::Join": [
                    " ",
                    [
                      "sudo python ./awslogs-agent-setup.py -n -r",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-c /tmp/awslogs.conf || error_exit 'Failed to run CloudWatch Logs agent setup'"
                    ]
                  ]
                },
                "cd /etc/systemd/system",
                "sudo touch awslogs.service",
                "sudo echo '[Unit]' >> awslogs.service",
                "sudo echo 'Description=Service for CloudWatch Logs agent' >> awslogs.service",
                "sudo echo 'After=rc-local.service' >> awslogs.service",
                "sudo echo '[Service]' >> awslogs.service",
                "sudo echo 'Type=simple' >> awslogs.service",
                "sudo echo 'Restart=always' >> awslogs.service",
                "sudo echo 'KillMode=process' >> awslogs.service",
                "sudo echo 'TimeoutSec=infinity' >> awslogs.service",
                "sudo echo 'PIDFile=/var/awslogs/state/awslogs.pid' >> awslogs.service",
                "sudo echo 'ExecStart=/var/awslogs/bin/awslogs-agent-launcher.sh --start --background --pidfile $PIDFILE --user awslogs --chuid awslogs &amp;' >> awslogs.service",
                "sudo echo '[Install]' >> awslogs.service",
                "sudo echo 'WantedBy=multi-user.target' >> awslogs.service",
                "sudo systemctl start awslogs.service",
                "sudo systemctl enable awslogs.service"
              ]
            ]
          }
        }
      }
    },
    "InstanceAutoScalinGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "Cooldown": {
          "Ref": "CoolDown"
        },
        "DesiredCapacity": {
          "Ref": "DesiredCapacity"
        },
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "MinSize": {
          "Ref": "MinSize"
        },
        "TargetGroupARNs": [
          {
            "Ref": "HttpTargetGroup"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "Subnet1"
          },
          {
            "Ref": "Subnet2"
          },
          {
            "Ref": "Subnet3"
          }
        ],
        "Tags": [
          {
            "Key": "deploy",
            "Value": "deploy",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "InstanceAutoScalinGroup"
        },
        "Cooldown": {
          "Ref": "CoolDown"
        },
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "InstanceAutoScalinGroup"
        },
        "Cooldown": {
          "Ref": "CoolDown"
        },
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "InstanceAutoScalinGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "InstanceAutoScalinGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "loadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Ref": "LoadBalancerPolicy"
          }
        ],
        "Subnets": [
          {
            "Ref": "Subnet1"
          },
          {
            "Ref": "Subnet2"
          },
          {
            "Ref": "Subnet3"
          }
        ],
        "Tags": [
          {
            "Key": "loadbalancer",
            "Value": "loadbalancer"
          }
        ]
      }
    },
    "ListenerToTarget": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "HttpTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "loadBalancer"
        },
        "Port": "443",
        "Protocol": "HTTPS",
        "Certificates": [
          {
            "CertificateArn": "arn:aws:acm:us-east-1:893334075795:certificate/e94c6134-40a4-4283-931a-426025a93f5f"
          }
        ]
      }
    },
    "HttpTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "httptest",
        "Port": "8080",
        "Protocol": "HTTP",
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    },
    "Route53Domain": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "loadBalancer",
              "DNSName"
            ]
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "loadBalancer",
              "CanonicalHostedZoneID"
            ]
          }
        },
        "Name": {
          "Ref": "DomainName"
        },
        "HostedZoneName": {
          "Ref": "DomainName"
        },
        "Type": "A"
      }
    },
    "myDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        },
        "TableName": "csye6225",
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": "true"
        }
      }
    },
    "myRDSInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName": "csye6225",
        "AllocatedStorage": "10",
        "DBInstanceClass": "db.t2.medium",
        "MultiAZ": false,
        "DBInstanceIdentifier": "csye6225-spring2018",
        "Engine": "MySQL",
        "EngineVersion": "5.6.37",
        "MasterUsername": "csye6225master",
        "MasterUserPassword": "csye6225password",
        "PubliclyAccessible": false,
        "VPCSecurityGroups": [
          {
            "Fn::ImportValue": "networking-dbSecurityGroupID"
          }
        ],
        "DBSubnetGroupName": {
          "Fn::ImportValue": "networking-myDBSubnetGroupID"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "csye6225"
          }
        ]
      },
      "DeletionPolicy": "Snapshot"
    },
    "myS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "S3BucketName"
        }
      }
    },
    "MySNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "lambdaarn"
            },
            "Protocol": "lambda"
          }
        ],
        "TopicName": "password_reset"
      }
    },
    "myInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          "CodeDeployEC2ServiceRole"
        ],
        "InstanceProfileName": "myInstanceProfileName"
      }
    }
  }
}
